count(cut, clarity) %>%
arrange(n)
diamonds %>%
count(cut, clarity) %>%
arrange(desc(n))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
theme(axis.text.x = element_text(angle = 90))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord.flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
theme(axis.text.x = element_text(angle = 90))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
coord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "fill")+
ylab("Proportion")
prop.table(table(diamonds$cut, diamonds$clarity))
ggplot(diamonds, aes(x=cut))+
geom_bar()+
ylab(~clarity)
ggplot(diamonds, aes(x=cut))+
geom_bar()+
facet_wrap(~clarity)
ggplot(diamonds, aes(x=cut))+
geom_bar()+
facet_wrap(~clarity)+
theme(axis.text.x = element_text(angle = 90))
round(prop.table(table(diamonds$cut, diamonds$clarity)))*100
round(prop.table(table(diamonds$cut, diamonds$clarity))*100,2)
ggplot(data = diamonds, mapping = aes(x=carat))+
geom_histogram()
ggplot(data = diamonds, mapping = aes(x=carat))+
geom_histogram(binwidth = 0.5)
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter (carat<3)
smaller <- diamonds %>%
filter (carat<3)
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x=carat, color = cut))
ggplot(data = smaller, mapping = aes(x=carat, color = cut))+
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth=0.01)
library(ggplot2)
library(tibble)
library(dplyr)
?diamonds
diamonds
glimpse(diamonds)
library(skimr)
skim(diamonds)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut))
diamonds %>% count (cut)
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
theme(axis.text.x = element_text(angle = 90))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
coord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "fill")+
ylab("Proportion")
prop.table(table(diamonds$cut, diamonds$clarity))
ggplot(diamonds, aes(x=cut))+
geom_bar()+
facet_wrap(~clarity)+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth=0.01)
ggplot(data = diamonds, mapping = aes(x=y), binwidth = 0.5)+
geom_histogram()
ggplot(data = diamonds, mapping = aes(x=y), binwidth = 0.5)+
geom_histogram()+
coord_cartesian(ylim = c(0,50))
View(diamonds)
diamonds %>%
filter(y<3 | y >20) %>%
select(price, x, y, z) %>%
arrange(y)
diamonds2 <- diamonds %>%
filter(between(y, 3, 20))
ggplot(diamonds2)+
geom_histogram(aes(x=y), binwidth = 0.5)
ggplot(data = diamonds, mapping = aes(x=y), binwidth = 0.5)+
geom_histogram()
diamonds %>%
mutate(y = ifelse(y<3 | y >20, NA, y)) %>%
ggplot(aes(c=x, y=y))+
geom_point()
diamonds %>%
mutate(y = ifelse(y<3 | y >20, NA, y)) %>%
ggplot(aes(x=x, y=y))+
geom_point()
diamonds %>%
ggplot(aes(x=x, y=y))+
geom_point()
ggplot(diamonds, aes(x=price))+
geom_freqpoly(aes(color=cut), binwidth=500)
ggplot(diamonds, aes(x=price, y = ..density..))+
geom_freqpoly(aes(color=cut), binwidth=500)
ggplot(diamonds, aes(price, cut))+
geom_boxplot()
ggplot(diamonds, aes(cut, price))+
geom_boxplot()
ggplot(diamonds, aes(cut, price))+
geom_boxplot()+
coord_flip()
ggplot(iamonds)+
geom_count(aes(cut, y=color))
ggplot(diamonds)+
geom_count(aes(cut, y=color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(aes(x=color, y=cut))+
geom_tile(aes(fill=n))
ggplot(diamonds)+
geom_point(carat, price)
ggplot(diamonds)+
geom_point(aes(carat, price))
ggplot(diamonds)+
geom_point(aes(carat, price), alpha=1/100)
ggplot(smaller, aes(carat, price))+
geom_bin2d()
ggplot(diamonds)+
geom_point(aes(carat, price), alpha=1/50)
library(ggplot2)
library(tibble)
library(dplyr)
library(ggplot2)
diamonds
library(corrr)
library(parsnip)
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
install.packages
install.packages("parsnip")
library(parsnip)
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
skimr::skim(diamonds)
skimr::skim(diamonds)
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate()
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
fashion()
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
network_plot()
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x)))
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x)))
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate()
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate()
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price)
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price)
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price))
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price)) %>%
filter(price >0.5)
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price)) %>%
filter(price >0.5) %>%
pull(term)
high_corr_variables
diamonds %>%
select(high_corr_variables, price)
data <- diamonds %>%
select(high_corr_variables, price)
data
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_test <- testing(data_split)
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
skimr::skim(diamonds)
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
fashion()
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
network_plot()
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price)) %>%
filter(price >0.5) %>%
pull(term)
high_corr_variables
data <- diamonds %>%
select(high_corr_variables, price)
data
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_test <- testing(data_split)
model <- lm(price ~., data = data_train) #., all other data
summary(model)
broom::tidy(model)
data <- diamonds
data <- diamonds
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
data <- diamonds
data
model<- lm(price ~., data = data_train)
model<- lm(price ~., data = data_train)
summary(model)
data <- diamonds
data
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_test <- testing(data_split)
model<- lm(price ~., data = data_train)
summary(model)
broom::tidy(model)
broom::tidy(model) %>%
arrange(p.value)
ata_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_test <- testing(data_split)
data_train %>%
recipe(price ~ ., data_train) %>%
step_dummy(all_nominal()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
prep()
data_rec <- data_train %>%
recipe(price ~ ., data_train) %>%
step_dummy(all_nominal()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
prep()
data_rec <- data_train %>%
recipe(price ~ ., data_train) %>%
step_dummy(all_nominal()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
prep()
data_rec <- data_train %>%
recipe(price ~ ., data_train) %>%
step_dummy(all_nominal()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
prep()
juice(data_rec)
data_rec <- data_train %>%
recipe(price ~ ., data_train) %>%
step_dummy(all_nominal()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
prep()
juiced <- juice(data_rec)
data_rec <- data_train %>%
recipe(price ~ ., data_train) %>%
step_dummy(all_nominal()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
prep()
juiced <- juice(data_rec)
lm_model <- parsnip::linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
fit(lm_model, price ~., juiced)
lm_fit <- fit(lm_model, price ~., juiced)
lm_fit <- fit(lm_model, price ~., juiced)
lm_fit
glance(lm_fit)
tidy(lm_fit)
lm_fit %>%
predict(new_data = juiced) %>%
mutate(truth = data_train$price)
results_train <- lm_fit %>%
predict(new_data = juiced) %>%
mutate(truth = data_train$price)
lm_fit %>%
predict(new_data = bake(data_rec, data_test)) %>%
mutate(truth = data_test$price)
results_train %>%
mutate(type = "train") %>%
bind_rows(
results_test %>%
mutate(type="test")
)
results_test <- lm_fit %>%
predict(new_data = bake(data_rec, data_test)) %>%
mutate(truth = data_test$price)
results_train %>%
mutate(type = "train") %>%
bind_rows(
results_test %>%
mutate(type="test")
)
results<- results_train %>%
mutate(type = "train") %>%
bind_rows(
results_test %>%
mutate(type="test")
)
results %>%
group_by(type) %>%
yardstick::rmse(truth, .pred)
results
ggplot(results, aes(truth, .pred))+
geom_point()++
geom_abline(color = "red", size=2)+
coord_fixed()
ggplot(results, aes(truth, .pred))+
geom_point()+
geom_abline(color = "red", size=2)+
coord_fixed()
#can just load libray(tidyverse) or library(tidymodels)
library(ggplot2)
library(tidyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
#can just load libray(tidyverse) or library(tidymodels)
library(ggplot2)
library(tidyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
titanic
install.packages("titanic")
Titanic
Titanic
library(titanic)
titanic_train
titanic_test
titanic_gender_model
data <- titanic_train
data_split <- initial_split(data)
train <- training(data_split)
test <- testing(data_split)
data <- titanic_train
data_split <- initial_split(data)
train <- training(data_split)
test <- testing(data_split)
skimr::skim(train)
View(train)
colnames(train)
data_rec <- recipe(Surved  ~., train) %>%
step_mutate(Survived = ifelse(Survived ==0, "Died", "Survived")) %>%
step_string2factor(Survived) %>%
step_rm(PassengerId, Name, Ticket, Cabin) %>%
step_meanimpute(Age) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_center(all_predictors(), -all_nominal()) %>%
step_scale(all_predictors(), -all_nominal())
data_rec <- recipe(Surved  ~., train) %>%
step_mutate(Survived = ifelse(Survived ==0, "Died", "Survived")) %>%
step_string2factor(Survived) %>%
step_rm(PassengerId, Name, Ticket, Cabin) %>%
step_impute_mean(Age) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_center(all_predictors(), -all_nominal()) %>%
step_scale(all_predictors(), -all_nominal())
data_rec <- recipe(Survived  ~., train) %>%
step_mutate(Survived = ifelse(Survived ==0, "Died", "Survived")) %>%
step_string2factor(Survived) %>%
step_rm(PassengerId, Name, Ticket, Cabin) %>%
step_impute_mean(Age) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_center(all_predictors(), -all_nominal()) %>%
step_scale(all_predictors(), -all_nominal())
data_rec
data_prep <- data_rec %>%
prep()
data_prep
# You can juice(data_prep) or bake(data_prep, train)
waldo::compare(juice(data_prep), bake(data_prep, train))
model <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Survived ~., data = bake(data_prep, train))
fitted_model <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Survived ~., data = bake(data_prep, train))
fitted_model %>%
predict(new_data = bake(data_prep, test)) %>%
bind_cols(
bake(data_prep, test) %>%
select(Survived)
)
# conf_mat
predictions %>%
conf_mat(Survived, .pred_class)
predictions <- fitted_model %>%
predict(new_data = bake(data_prep, test)) %>%
bind_cols(
bake(data_prep, test) %>%
select(Survived)
)
# conf_mat
predictions %>%
conf_mat(Survived, .pred_class)
fitted_model <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Survived ~., data = bake(data_prep, train))
# conf_mat
predictions %>%
conf_mat(Survived, .pred_class)
predictions %>%
metrics(Survived, .pred_class)
predictions %>%
metrics(Survived, .pred_class) %>%
select(-.estimator)
predictions %>%
metrics(Survived, .pred_class) %>%
select(-.estimator) %>%
filter(.metric=="accuracy")
predictions %>%
precision()
predictions %>%
precision(Survived, .pred_class)
predictions %>%
precision(Survived, .pred_class) %>%
select(-.estimator)
predictions %>%
recall(Survived, .pred_class)
predictions %>%
recall(Survived, .pred_class) %>%
select(-.estimator)
predictions %>%
f_meas(Survived, .pred_class)
roc_auc()
?caTools
install.packages(caTools)
install.packages("caTools")
?caTools
??caTools
install.packages("caret")
install.packages
install.packages("ggally")
install.packages("GGally")
?knn()
