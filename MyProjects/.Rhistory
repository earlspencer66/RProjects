models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
model1 <- function(a, data){
a[1] + data$x *a[2]
}
model1(c(7,1.5), sim1)
measure_distance <- function(mod, data){
diff <- data&y - model1(mod, data)
sqrt(mean(diff*diff))
}
measure_distance(c(7, 1.5), sim1)
measure_distance <- function(mod, data){
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2){
measure_distance(c(a1, a2), sim1)
}
models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist)) %>%
View()
sim1_dist <- function(a1, a2){
measure_distance(c(a1, a2), sim1)
}
models <- models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
sim1_dist <- function(a1, a2){
measure_distance(c(a1, a2), sim1)
}
models <- models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
sim1_dist <- function(a1, a2){
measure_distance(c(a1, a2), sim1)
}
models <- models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y))+
geom_point(size = 2, color= "gray30")+
geom_abline(
aes(intercept = a1, slope=a2, color = -dist),
data = filter(models, rank(dist)<=10)
)
ggplot(models, aes(a1, a2))+
geom_point(data = filter(models, rank(dist)<=10), size=4, color="red")+
geom_point(aes(color = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length=25),
a2 = seq(1,3, length= 25)
)
grid %>% ggplot(aes(a1, a2))+
geom_point(data = filter(grid, rank(dist)<=10), size=4, color="red")+
geom_point(aes(colour = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length=25),
a2 = seq(1,3, length= 25)
) %>%
mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>% ggplot(aes(a1, a2))+
geom_point(data = filter(grid, rank(dist)<=10), size=4, color="red")+
geom_point(aes(color = -dist))
ggplot(sim1, aes(x,y))+
geom_point(size=2, color="gray30")+
geom_abline(
aes(intercept=a1, slope=a2, color=-dist),
data = filter(grid, rank(dist)<=10)
)
best <- optim(c(0,0), measure_distance, data=sim1
best <- optim(c(0,0), measure_distance, data=sim1
best <- optim(c(0,0), measure_distance, data=sim1
library(ggplot2)
library(tibble)
library(dplyr)
library(modelr)
View(sim1)
ggplot(sim1, aes(x, y))+
geom_point(color="maroon")
#use  runif() to generate a set of uniform random numbers
# we want to generate random uniform lines
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
models
ggplot(data= sim1, aes(x,y))+
geom_point(color="maroon")+
geom_abline(aes(intercept= a1, slope=-a2), data = models, alpha=0.25)
#these lines are the family of models
model1 <- function(a, data){
a[1] + data$x *a[2]
}
model1(c(7,1.5), sim1)
measure_distance <- function(mod, data){
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2){
measure_distance(c(a1, a2), sim1)
}
models <- models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y))+
geom_point(size = 2, color= "gray30")+
geom_abline(
aes(intercept = a1, slope=a2, color = -dist),
data = filter(models, rank(dist)<=10)
)
ggplot(models, aes(a1, a2))+
geom_point(data = filter(models, rank(dist)<=10), size=4, color="red")+
geom_point(aes(color = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length=25),
a2 = seq(1,3, length= 25)
) %>%
mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>% ggplot(aes(a1, a2))+
geom_point(data = filter(grid, rank(dist)<=10), size=4, color="red")+
geom_point(aes(color = -dist))
ggplot(sim1, aes(x,y))+
geom_point(size=2, color="gray30")+
geom_abline(
aes(intercept=a1, slope=a2, color=-dist),
data = filter(grid, rank(dist)<=10)
)
best <- optim(c(0,0), measure_distance, data=sim1
best <- optim(c(0,0), measure_distance, data=sim1
best <- optim(c(0,0), measure_distance, data=sim1)
best <- optim(c(0,0), measure_distance, data=sim1)
best
best <- optim(c(0,0), measure_distance, data=sim1)
best$par
ggplot(sim1, aes(x,y))+
geom_point(size=2, color="gray30")+
geom_abline(intercept = best$par[1], slope=best$par[2])
ggplot(sim1, aes(x,y))+
geom_point(size=2, color="gray30")+
geom_abline(intercept = best$par[1], slope=best$par[2], color="blue")
sim1_mod <- lm(y~x, data = sim1)
coef(sim1_mod)
sim1_mod <- lm(y~x, data = sim1)
coef(sim1_mod)
broom::tidy(sim1_mod)
library(rsample)
library(rsample)
data_split <- initial_split(sim1)
data_train <- training(data_split)
data_test <- testing(data_split)
model <- lm(y~x, data = data_train)
prediction <- predict(model, data_test)
prediction
data_test
library(rsample)
data_split <- initial_split(sim1)
data_train <- training(data_split)
data_test <- testing(data_split)
model <- lm(y~x, data = data_train)
prediction <- predict(model, data_test)
prediction
data_test
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction) %>%
View()
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
library(ggplot2)
library(tibble)
library(dplyr)
library(modelr)
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
model <- lm(y~x, data = data_train)
library(rsample)
data_split <- initial_split(sim1)
data_train <- training(data_split)
data_test <- testing(data_split)
prediction <- predict(model, data_test)
data_test <- data_test %>%
mutate(predvalues = prediction)
#coef(model)
ggplot(data_test)+
geom_line(aes(x, predvalues), size=3, color = "red", alpha=0.5)+
geom_point(aes(x, y), size=5, color="green", alpha = 0.75)+
geom_point(data=sim1, aes(x, y), alpha=0.5)
install.packages("yardstick")
library(yardstick)
metrics(data_test, y, predvalues)
library(ggplot2)
library(tibble)
library(dplyr)
diamonds
?diamons
?diamonds
diamonds
glimpse(diamonds)
summary(diamonds)
dim(diamonds)
skim(diamonds)
install.packages("skimr")
install.packages("skimr")
skim(diamonds)
library(skimr)
skim(diamonds)
library(skimr)
skim(diamonds)
dim(diamonds)
library(ggplot2)
library(tibble)
library(dplyr)
?diamonds
diamonds
glimpse(diamonds)
summary(diamonds)
dim(diamonds)
library(skimr)
skim(diamonds)
view(diamonds)
View(diamonds)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut))
diamonds %>% count (cut)
table(diamonds$cut)
table(diamonds$cut)
diamonds&cut
diamonds
diamonds$cut
table(diamonds$cut)
diamonds $cut
table(diamonds$cut)
#diamonds $cut
unique(diamonds$cut)
levels(diamonds$clarity)
table(diamonds$cut, diamonds$clarity)
diamonds %>%
count(cut, clarity) %>%
arrange(n)
diamonds %>%
count(cut, clarity) %>%
arrange(desc(n))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
theme(axis.text.x = element_text(angle = 90))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord.flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
theme(axis.text.x = element_text(angle = 90))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
cord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
coord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "fill")+
ylab("Proportion")
prop.table(table(diamonds$cut, diamonds$clarity))
ggplot(diamonds, aes(x=cut))+
geom_bar()+
ylab(~clarity)
ggplot(diamonds, aes(x=cut))+
geom_bar()+
facet_wrap(~clarity)
ggplot(diamonds, aes(x=cut))+
geom_bar()+
facet_wrap(~clarity)+
theme(axis.text.x = element_text(angle = 90))
round(prop.table(table(diamonds$cut, diamonds$clarity)))*100
round(prop.table(table(diamonds$cut, diamonds$clarity))*100,2)
ggplot(data = diamonds, mapping = aes(x=carat))+
geom_histogram()
ggplot(data = diamonds, mapping = aes(x=carat))+
geom_histogram(binwidth = 0.5)
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter (carat<3)
smaller <- diamonds %>%
filter (carat<3)
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x=carat, color = cut))
ggplot(data = smaller, mapping = aes(x=carat, color = cut))+
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth=0.01)
library(ggplot2)
library(tibble)
library(dplyr)
?diamonds
diamonds
glimpse(diamonds)
library(skimr)
skim(diamonds)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut))
diamonds %>% count (cut)
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
theme(axis.text.x = element_text(angle = 90))
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "dodge")+
coord_flip()
ggplot(diamonds, aes(x=cut, fill = clarity))+
geom_bar(position = "fill")+
ylab("Proportion")
prop.table(table(diamonds$cut, diamonds$clarity))
ggplot(diamonds, aes(x=cut))+
geom_bar()+
facet_wrap(~clarity)+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth=0.01)
ggplot(data = diamonds, mapping = aes(x=y), binwidth = 0.5)+
geom_histogram()
ggplot(data = diamonds, mapping = aes(x=y), binwidth = 0.5)+
geom_histogram()+
coord_cartesian(ylim = c(0,50))
View(diamonds)
diamonds %>%
filter(y<3 | y >20) %>%
select(price, x, y, z) %>%
arrange(y)
diamonds2 <- diamonds %>%
filter(between(y, 3, 20))
ggplot(diamonds2)+
geom_histogram(aes(x=y), binwidth = 0.5)
ggplot(data = diamonds, mapping = aes(x=y), binwidth = 0.5)+
geom_histogram()
diamonds %>%
mutate(y = ifelse(y<3 | y >20, NA, y)) %>%
ggplot(aes(c=x, y=y))+
geom_point()
diamonds %>%
mutate(y = ifelse(y<3 | y >20, NA, y)) %>%
ggplot(aes(x=x, y=y))+
geom_point()
diamonds %>%
ggplot(aes(x=x, y=y))+
geom_point()
ggplot(diamonds, aes(x=price))+
geom_freqpoly(aes(color=cut), binwidth=500)
ggplot(diamonds, aes(x=price, y = ..density..))+
geom_freqpoly(aes(color=cut), binwidth=500)
ggplot(diamonds, aes(price, cut))+
geom_boxplot()
ggplot(diamonds, aes(cut, price))+
geom_boxplot()
ggplot(diamonds, aes(cut, price))+
geom_boxplot()+
coord_flip()
ggplot(iamonds)+
geom_count(aes(cut, y=color))
ggplot(diamonds)+
geom_count(aes(cut, y=color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(aes(x=color, y=cut))+
geom_tile(aes(fill=n))
ggplot(diamonds)+
geom_point(carat, price)
ggplot(diamonds)+
geom_point(aes(carat, price))
ggplot(diamonds)+
geom_point(aes(carat, price), alpha=1/100)
ggplot(smaller, aes(carat, price))+
geom_bin2d()
ggplot(diamonds)+
geom_point(aes(carat, price), alpha=1/50)
library(ggplot2)
library(tibble)
library(dplyr)
library(ggplot2)
diamonds
library(corrr)
library(parsnip)
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
install.packages
install.packages("parsnip")
library(parsnip)
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
skimr::skim(diamonds)
skimr::skim(diamonds)
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate()
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
fashion()
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
network_plot()
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x)))
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x)))
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate()
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate()
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price)
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price)
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price))
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price)) %>%
filter(price >0.5)
high_corr_variables
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price)) %>%
filter(price >0.5) %>%
pull(term)
high_corr_variables
diamonds %>%
select(high_corr_variables, price)
data <- diamonds %>%
select(high_corr_variables, price)
data
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_test <- testing(data_split)
library(ggplot2)
library(dplyr)
library(corrr)
library(rsample)
library(recipes)
library(parsnip)
skimr::skim(diamonds)
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
fashion()
diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
network_plot()
high_corr_variables <- diamonds %>%
select(where(~!is.factor(.x))) %>%
correlate() %>%
focus(price) %>%
arrange(desc(price)) %>%
filter(price >0.5) %>%
pull(term)
high_corr_variables
data <- diamonds %>%
select(high_corr_variables, price)
data
data_split <- initial_split(data, strata=price)
data_train <- training(data_split)
data_test <- testing(data_split)
model <- lm(price ~., data = data_train) #., all other data
summary(model)
