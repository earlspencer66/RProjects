---
title: "Linear Regression: A Simple Model"
output: html_notebook
---

```{r}
library(ggplot2)
library(tibble)
library(dplyr)
library(modelr)
```

## Use data set from modelr
### Look at sim1 data set

```{r}
View(sim1)
```

```{r}
ggplot(sim1, aes(x, y))+
geom_point(color="maroon")
```

### Generate a family of models
#### draw a linear line between the points
```{r}
#use  runif() to generate a set of uniform random numbers
# we want to generate random uniform lines
models <- tibble(
  a1 = runif(250, -20, 40),
  a2 = runif(250, -5, 5)
)

models

ggplot(data= sim1, aes(x,y))+
geom_point(color="maroon")+
geom_abline(aes(intercept= a1, slope=-a2), data = models, alpha=0.25)
#these lines are the family of models
```


### Create a function called model1

```{r}
model1 <- function(a, data){
  a[1] + data$x *a[2]
}
model1(c(7,1.5), sim1)
```
## Root mean squared deviation
```{r}
measure_distance <- function(mod, data){
  diff <- data$y - model1(mod, data)
  sqrt(mean(diff^2))
}

measure_distance(c(7, 1.5), sim1)
```
### Compute distance for all the models

```{r}
sim1_dist <- function(a1, a2){
  measure_distance(c(a1, a2), sim1)
}

models <- models %>% mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))

models
```
### Pick the ten best model
```{r}
ggplot(sim1, aes(x, y))+
  geom_point(size = 2, color= "gray30")+
  geom_abline(
    aes(intercept = a1, slope=a2, color = -dist),
    data = filter(models, rank(dist)<=10)
  )
```
```{r}
ggplot(models, aes(a1, a2))+
  geom_point(data = filter(models, rank(dist)<=10), size=4, color="red")+
  geom_point(aes(color = -dist))
```
### Generate a new family of models
expand.grid

```{r}
grid <- expand.grid(
  a1 = seq(-5, 20, length=25),
  a2 = seq(1,3, length= 25)
) %>%
  mutate (dist = purrr::map2_dbl(a1, a2, sim1_dist))

grid %>% ggplot(aes(a1, a2))+
  geom_point(data = filter(grid, rank(dist)<=10), size=4, color="red")+
  geom_point(aes(color = -dist))

```

```{r}
ggplot(sim1, aes(x,y))+
  geom_point(size=2, color="gray30")+
  geom_abline(
    aes(intercept=a1, slope=a2, color=-dist),
    data = filter(grid, rank(dist)<=10)
  )
```

## Find the best model
Use function optim

```{r}
best <- optim(c(0,0), measure_distance, data=sim1)

best$par
```

```{r}
ggplot(sim1, aes(x,y))+
  geom_point(size=2, color="gray30")+
  geom_abline(intercept = best$par[1], slope=best$par[2], color="blue")
```

==================================
## How to do the same in Base R
```{r}
sim1_mod <- lm(y~x, data = sim1)
coef(sim1_mod)

broom::tidy(sim1_mod)
```

## Prediction
### How do you predict new data
Train/test split
```{r}
library(rsample)

data_split <- initial_split(sim1)
data_train <- training(data_split)
data_test <- testing(data_split)
```


### Model fitting
```{r}
model <- lm(y~x, data = data_train)
```


### Prediction
```{r}
prediction <- predict(model, data_test)

data_test <- data_test %>%
  mutate(predvalues = prediction)

#coef(model)
ggplot(data_test)+
  geom_line(aes(x, predvalues), size=3, color = "red", alpha=0.5)+
  geom_point(aes(x, y), size=5, color="green", alpha = 0.75)+
  geom_point(data=sim1, aes(x, y), alpha=0.5)
```

## Measure the accuracy
```{r}
library(yardstick)

metrics(data_test, y, predvalues)
```

